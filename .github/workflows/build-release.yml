name: Build and Release

on:
  push:
    tags:
      - 'v*'  # 触发条件：推送版本标签 (v1.0.0, v2.1.3, etc.)
  workflow_dispatch:  # 允许手动触发

jobs:
  build-and-release:
    permissions:
      contents: write  # 需要写权限来创建发布
    strategy:
      fail-fast: false
      matrix:
        include:
          # macOS 构建
          - platform: "macos-latest"
            args: "--target aarch64-apple-darwin"
            target: "aarch64-apple-darwin"
            arch: "arm64"
            os: "macos"
          - platform: "macos-latest"
            args: "--target x86_64-apple-darwin"
            target: "x86_64-apple-darwin"
            arch: "x64"
            os: "macos"
          
          # Windows 构建
          - platform: "windows-latest"
            args: "--target x86_64-pc-windows-msvc"
            target: "x86_64-pc-windows-msvc"
            arch: "x64"
            os: "windows"
          
          # Linux 构建
          - platform: "ubuntu-latest"
            args: "--target x86_64-unknown-linux-gnu"
            target: "x86_64-unknown-linux-gnu"
            arch: "x64"
            os: "linux"

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 获取完整历史用于版本信息

      - name: Install system dependencies (macOS)
        if: matrix.platform == 'macos-latest'
        run: |
          # macOS 通常不需要额外依赖，Xcode Command Line Tools 已预安装
          echo "macOS dependencies already available"

      - name: Install system dependencies (Windows)
        if: matrix.platform == 'windows-latest'
        run: |
          # Windows 运行器已预装 MSVC 和 WebView2
          echo "Windows dependencies already available"
          # 确保 PowerShell 执行策略允许脚本运行
          Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser -Force

      - name: Install system dependencies (Linux)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf
          # 安装额外的系统工具
          sudo apt-get install -y build-essential curl wget file

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './tauri-app/src-tauri -> target'
          key: ${{ matrix.target }}
          cache-targets: true
          cache-all-crates: true

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: './tauri-app/pnpm-lock.yaml'

      - name: Install frontend dependencies
        working-directory: ./tauri-app
        run: pnpm install --frozen-lockfile

      - name: Build Tauri application
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # 可选：代码签名证书 (macOS)
          APPLE_CERTIFICATE: ${{ secrets.APPLE_CERTIFICATE }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
          # 可选：Windows 代码签名
          WINDOWS_CERTIFICATE: ${{ secrets.WINDOWS_CERTIFICATE }}
          WINDOWS_CERTIFICATE_PASSWORD: ${{ secrets.WINDOWS_CERTIFICATE_PASSWORD }}
        with:
          projectPath: ./tauri-app
          tagName: ${{ github.ref_name }}  # 使用推送的标签作为发布标签
          releaseName: "OpenWrt Builder ${{ github.ref_name }}"
          releaseBody: |
            ## 🎉 OpenWrt Builder ${{ github.ref_name }}
            
            ### 📦 下载链接
            
            | 平台 | 架构 | 下载链接 |
            |------|------|----------|
            | macOS | Apple Silicon (M1/M2) | [.dmg](下载链接将自动生成) |
            | macOS | Intel | [.dmg](下载链接将自动生成) |
            | Windows | x64 | [.msi](下载链接将自动生成) |
            | Linux | x64 | [.deb / .AppImage](下载链接将自动生成) |
            
            ### 🚀 新特性
            - ✅ 完整的 Windows 支持
            - ✅ Linux 桌面应用支持 (.deb/.AppImage)
            - ✅ PowerShell 脚本构建支持
            - ✅ 跨平台统一体验
            
            ### 📋 系统要求
            - **macOS**: macOS 10.15+ (Catalina)
            - **Windows**: Windows 10/11 + Docker Desktop
            - **Linux**: Ubuntu 18.04+ / 其他主流发行版 + Docker
            - **所有平台**: 需要安装并运行 Docker
            
            ### 🔧 使用方法
            1. 安装并启动 Docker Desktop
            2. 下载对应平台的安装包
            3. 安装并运行 OpenWrt Builder
            4. 在图形界面中配置并构建固件
            
            或使用命令行：
            ```bash
            # Linux/macOS
            ./run.sh --image=immortalwrt/imagebuilder:x86-64-openwrt-23.05.1 --with-pull
            
            # Windows PowerShell  
            .\run.ps1 -Image "immortalwrt/imagebuilder:x86-64-openwrt-23.05.1" -WithPull
            ```
            
            ### 📦 Linux 安装说明
            - **.deb 包**: `sudo dpkg -i openwrt-builder_*.deb && sudo apt-get install -f`
            - **.AppImage**: `chmod +x OpenWrt-Builder-*.AppImage && ./OpenWrt-Builder-*.AppImage`
          releaseDraft: false  # 自动发布
          prerelease: false    # 正式发布
          includeUpdaterJson: true  # 包含自动更新信息
          args: ${{ matrix.args }}

      - name: Upload build artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ matrix.os }}-${{ matrix.arch }}
          path: |
            ./tauri-app/src-tauri/target/${{ matrix.target }}/release/bundle/
            ./tauri-app/src-tauri/target/${{ matrix.target }}/release/*.exe
            ./tauri-app/src-tauri/target/${{ matrix.target }}/release/*.app
          retention-days: 30