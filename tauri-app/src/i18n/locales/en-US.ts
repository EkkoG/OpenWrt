export default {
  common: {
    build: 'Build',
    config: 'Config',
    settings: 'Settings',
    modules: 'Modules',
    cancel: 'Cancel',
    confirm: 'Confirm',
    save: 'Save',
    delete: 'Delete',
    edit: 'Edit',
    add: 'Add',
    select: 'Select',
    search: 'Search',
    loading: 'Loading...',
    success: 'Success',
    error: 'Error',
    warning: 'Warning',
    info: 'Info',
    yes: 'Yes',
    no: 'No',
    enable: 'Enable',
    disable: 'Disable',
    enabled: 'Enabled',
    disabled: 'Disabled',
    version: 'Version',
    status: 'Status',
    language: 'Language',
    theme: 'Theme',
    auto: 'Auto',
    light: 'Light',
    dark: 'Dark',
    systemTheme: 'System',
    copy: 'Copy',
    copied: 'Copied',
    clear: 'Clear',
    reset: 'Reset',
    refresh: 'Refresh',
    back: 'Back',
    close: 'Close',
    update: 'Update'
  },
  
  nav: {
    build: 'Build',
    config: 'Config',
    settings: 'Settings',
    modules: 'Module Manager'
  },
  
  docker: {
    status: 'Docker Status',
    ready: 'Docker Ready',
    notReady: 'Docker Not Ready',
    installed: 'Docker Installed',
    notInstalled: 'Docker Not Installed',
    running: 'Docker Running',
    notRunning: 'Docker Not Running',
    installStatus: 'Install Status',
    runningStatus: 'Running Status',
    statusReady: 'Ready',
    statusNotReady: 'Not Ready',
    statusInstalled: 'Installed',
    statusNotInstalled: 'Not Installed',
    statusRunning: 'Running',
    statusNotRunning: 'Not Running',
    version: 'Docker Version',
    composeVersion: 'Compose Version',
    checkingStatus: 'Checking Docker status...',
    errorChecking: 'Failed to check Docker status'
  },
  
  build: {
    welcomeTitle: 'Welcome to OpenWrt Builder',
    welcomeSubtitle: 'Easily build customized OpenWrt firmware, select required modules, and start building with one click',
    pageTitle: 'Build Manager',
    startBuild: 'Start Build',
    cancelBuild: 'Cancel Build',
    building: 'Building',
    buildSuccess: 'Build Successful',
    buildFailed: 'Build Failed',
    buildCancelled: 'Build Cancelled',
    buildLog: 'Build Log',
    clearLog: 'Clear Log',
    copyLog: 'Copy Log',
    copyCommand: 'Copy Command',
    commandCopied: 'Build command copied to clipboard',
    logCopied: 'Log copied to clipboard',
    
    imageSelection: 'Image Selection',
    repository: 'Repository',
    imageTag: 'Image Tag',
    customTag: 'Custom Tag',
    popularTags: 'Popular Tags',
    selectOrInputTag: 'Select or input image tag',
    customTagPlaceholder: 'e.g. x86-64-v23.05.2',
    
    outputConfig: 'Output Configuration',
    outputDirectory: 'Output Directory',
    selectOutputDir: 'Select Output Directory',
    selectFirmwareOutputDir: 'Select firmware output directory',
    outputDirNotSet: 'Please select output directory first',
    
    deviceProfile: 'Device Profile',
    selectProfile: 'Select device profile',
    profilePlaceholder: 'e.g. generic, r4s, x86_64, etc.',
    
    advancedOptions: 'Advanced Options',
    showAdvanced: 'Show Advanced Options',
    hideAdvanced: 'Hide Advanced Options',
    pullImage: 'Pull Latest Image',
    removeFirst: 'Remove Container First',
    useMirror: 'Use Mirror',
    mirrorUrl: 'Mirror URL',
    mirrorPlaceholder: 'Leave empty for default mirror',
    rootfsSize: 'Root Filesystem Size',
    rootfsSizePlaceholder: 'Leave empty for default',
    rootfsSizeHint: 'MB, leave empty for ImageBuilder default',
    
    dockerOptions: 'Docker Options',
    pullImageTooltip: '--with-pull: Ensure latest ImageBuilder image',
    removeFirstTooltip: '--rm-first: Clean up conflicting containers',
    mirrorSettings: 'Mirror Settings',
    useMirrorTooltip: '--use-mirror: Use mirror for faster package downloads',
    mirrorUrlHint: 'Tip: Do not include http:// or https:// prefix',
    
    mirrors: {
      tuna: 'Tsinghua University Mirror',
      jlu: 'Jilin University Mirror',
      ustc: 'USTC Mirror',
      scut: 'SCUT Mirror'
    },
    
    moduleSelection: 'Module Selection',
    enabledModules: 'Enabled Modules',
    noModulesEnabled: 'No modules enabled',
    customModulesPath: 'Custom Modules Path',
    selectCustomModulesPath: 'Select custom modules directory',
    
    buildCommand: 'Build Command',
    commandPreview: 'Command Preview',
    
    logs: {
      starting: 'Starting build...',
      pullingImage: 'Pulling image...',
      creatingContainer: 'Creating container...',
      buildingFirmware: 'Building firmware...',
      cleaningUp: 'Cleaning up...',
      completed: 'Build completed',
      failed: 'Build failed: {error}',
      cancelled: 'Build cancelled',
      outputSaved: 'Firmware saved to: {path}'
    }
  },
  
  config: {
    title: 'Configuration Manager',
    quickSelect: 'Quick Select',
    createNew: 'New Configuration',
    loadConfig: 'Load Configuration',
    saveConfig: 'Save Configuration',
    deleteConfig: 'Delete Configuration',
    exportConfig: 'Export Configuration',
    importConfig: 'Import Configuration',
    
    configName: 'Configuration Name',
    configDescription: 'Configuration Description',
    lastModified: 'Last Modified',
    createdAt: 'Created At',
    
    saveSuccess: 'Configuration saved successfully',
    loadSuccess: 'Configuration loaded successfully',
    deleteSuccess: 'Configuration deleted successfully',
    deleteConfirm: 'Are you sure you want to delete configuration "{name}"?',
    
    defaultDescription: 'Configuration saved from build page',
    selectConfig: 'Select Configuration',
    selectSavedConfig: 'Select saved configuration',
    noDescription: 'No description',
    saveCurrentConfig: 'Save current configuration',
    manageConfig: 'Manage configurations',
    currentConfig: 'Current configuration',
    updatedAt: 'Updated at',
    saveFailed: 'Failed to save configuration',
    updateConfig: 'Update Configuration',
    saveNewConfig: 'Save New Configuration',
    configNamePlaceholder: 'e.g., Production Config',
    willUpdateCurrent: 'Will update current configuration',
    changeNameWillCreate: 'Changing name will create new configuration',
    configDescriptionOptional: 'Configuration Description (Optional)',
    descriptionPlaceholder: 'Describe the purpose of this configuration...',
    
    copy: 'Copy',
    searchPlaceholder: 'Search configurations...',
    noConfigs: 'No Configurations',
    noConfigsHint: 'Save configuration from build page or import existing',
    noImageSelected: 'No image selected',
    modulesEnabled: '{count} modules enabled',
    preview: 'Preview',
    duplicate: 'Duplicate',
    confirmDelete: 'Confirm Delete',
    deleteConfirmMessage: 'Are you sure you want to delete "{name}"? This action cannot be undone.',
    duplicateConfig: 'Duplicate Configuration',
    newConfigName: 'New Configuration Name',
    copyJson: 'Copy JSON',
    
    validation: {
      nameRequired: 'Please enter configuration name',
      nameExists: 'Configuration name already exists',
      invalidFormat: 'Invalid configuration format'
    }
  },
  
  modules: {
    title: 'Module Manager',
    builtinModules: 'Built-in Modules',
    customModules: 'Custom Modules',
    moduleDetail: 'Module Details',
    moduleName: 'Module Name',
    moduleDescription: 'Module Description',
    moduleSource: 'Module Source',
    moduleStatus: 'Module Status',
    moduleReadme: 'Module README',
    
    envVars: 'Environment Variables',
    envVarName: 'Variable Name',
    envVarValue: 'Variable Value',
    envVarDescription: 'Description',
    globalEnvVars: 'Global Environment Variables',
    globalEnvVarsHint: 'One per line, format: KEY=VALUE',
    
    viewDetails: 'View Details',
    enableModule: 'Enable Module',
    disableModule: 'Disable Module',
    configureModule: 'Configure Module',
    
    noModulesFound: 'No modules found',
    loadingModules: 'Loading modules...',
    refreshModules: 'Refresh Module List',
    selectAll: 'Select All',
    deselectAll: 'Deselect All',
    selectCustomModulesDir: 'Select Custom Modules Directory',
    searchModules: 'Search modules',
    moduleStats: 'Total {total} modules, {enabled} enabled',
    custom: 'Custom',
    builtin: 'Built-in',
    needConfig: 'Need Config',
    noExtraConfig: 'This module requires no additional configuration',
    tryDifferentSearch: 'Try different search criteria',
    clickRefresh: 'Click refresh to load modules',
    loadingModuleDocs: 'Loading module documentation...',
    loadModuleDocsFailed: 'Failed to load module documentation',
    noDocumentTitle: 'No Documentation',
    noDocumentText: 'This module has no detailed documentation yet'
  },
  
  settings: {
    title: 'Application Settings',
    general: 'General Settings',
    appearance: 'Appearance',
    language: 'Language Settings',
    advanced: 'Advanced Settings',
    
    checkUpdates: 'Auto Check Updates',
    workingDirectory: 'Working Directory',
    selectWorkingDir: 'Select Working Directory',
    
    themeMode: 'Theme Mode',
    lightTheme: 'Light Theme',
    darkTheme: 'Dark Theme',
    autoTheme: 'Follow System',
    
    currentLanguage: 'Current Language',
    selectLanguage: 'Select Language',
    
    resetSettings: 'Reset Settings',
    resetConfirm: 'Are you sure you want to reset all settings?',
    resetSuccess: 'Settings reset successfully',
    
    about: 'About',
    appVersion: 'App Version',
    checkForUpdates: 'Check for Updates',
    reportIssue: 'Report Issue',
    documentation: 'Documentation'
  },
  
  messages: {
    dockerRequired: 'Docker must be installed and running to build firmware',
    dockerNotInstalledHint: 'Please visit https://docker.com to download Docker Desktop',
    dockerNotRunningHint: 'Please start Docker Desktop application',
    selectImageFirst: 'Please select or input image tag first',
    selectOutputFirst: 'Please select output directory first',
    buildInProgress: 'Building firmware, click to view details',
    confirmCancelBuild: 'Are you sure you want to cancel the current build?',
    noLogsAvailable: 'No logs available',
    
    error: {
      loadModules: 'Failed to load modules',
      saveConfig: 'Failed to save configuration',
      loadConfig: 'Failed to load configuration',
      startBuild: 'Failed to start build',
      dockerNotReady: 'Docker environment not ready',
      invalidConfig: 'Invalid configuration',
      networkError: 'Network error',
      unknownError: 'Unknown error'
    },
    
    success: {
      configSaved: 'Configuration saved',
      configLoaded: 'Configuration loaded',
      buildStarted: 'Build started',
      buildCompleted: 'Build completed',
      settingsSaved: 'Settings saved'
    },
    
    copyLogsFailed: 'Failed to copy logs, please copy manually'
  },
  
  tooltips: {
    switchTheme: 'Switch Theme',
    debugMode: 'Debug Mode',
    workingDir: 'Working Directory',
    dockerStatus: 'Docker Status',
    buildStatus: 'Build Status',
    clickToView: 'Click to view details',
    copyToClipboard: 'Copy to clipboard',
    refresh: 'Refresh',
    moreOptions: 'More Options',
    resourcePath: 'Resource Path'
  }
}